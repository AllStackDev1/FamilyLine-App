{"version":3,"sources":["Utils/Theme/index.ts","Components/Shared/Loading/Splash.tsx","Views/404/index.tsx","Views/index.tsx","Routes/index.tsx","Container/App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx","Utils/Api/axios.ts","Utils/Api/services.ts","Stores/auth.store.ts","Utils/Providers/AuthContextProvider.tsx","Utils/variables.ts"],"names":["breakpoints","createBreakpoints","sm","md","lg","xl","theme","extendTheme","styles","global","body","fontSize","fontFamily","lineHeight","bg","fonts","heading","fontSizes","xx","tiny","colors","brand","green","brandGreen","space","sizes","shadows","Splash","text","flexDir","h","align","justify","size","speed","thickness","emptyColor","color","className","NotFound","w","m","Views","Login","lazy","Register","Router","pathname","useLocation","navigate","useNavigate","useEffect","useRoutes","path","element","fallback","queryClient","QueryClient","App","client","AuthContextProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","http","post","a","url","response","data","patch","get","query","queryString","QueryString","stringify","delete","put","this","axios","create","baseURL","API_URL","headers","interceptors","request","use","config","token","sessionStorage","getItem","Authorization","Promise","reject","includes","status","register","payload","JSON","login","authStore","set","user","parse","localStorage","isLoading","result","errors","Object","values","join","AuthContext","createContext","children","useState","show","setShow","isAccepted","setAccepted","state","toast","useToast","title","duration","description","position","isClosable","setState","Provider","value","useAuth","useContext","process","GOOGLE_CLIENT_ID","FACEBOOK_CLIENT_ID","LINKEDIN_CLIENT_ID","LINKEDIN_STATE"],"mappings":"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","file":"static/js/main.ed2dc5cd.chunk.js","sourcesContent":["import { extendTheme } from '@chakra-ui/react'\nimport { createBreakpoints } from '@chakra-ui/theme-tools'\n\nconst breakpoints = createBreakpoints({\n  sm: '40rem', // 640px\n  md: '48em', // 768\n  lg: '62em', // 992\n  xl: '80em', // 1280\n  '2xl': '85.375em', // 1366\n  '3xl': '90em', // 1440\n  '4xl': '96em', // 1536\n  '5xl': '120em' // 1920\n})\n\nexport const theme = extendTheme({\n  styles: {\n    global: () => ({\n      body: {\n        fontSize: 'md',\n        fontFamily: '\"Montserrat\", sans-serif',\n        lineHeight: 'tall',\n        bg: '#F2F2F7'\n      }\n    })\n  },\n  breakpoints,\n  fonts: {\n    heading: '\"Montserrat\", sans-serif',\n    body: '\"Montserrat\", sans-serif'\n  },\n  fontSizes: {\n    xx: '.55rem',\n    tiny: '.68rem',\n    '7xl': '5rem',\n    '8xl': '6rem'\n  },\n  colors: {\n    brand: {\n      bg: {\n        50: 'rgba(0, 0, 0, 0.3);',\n        100: '#F8FFFB',\n        200: '#FCFCFC'\n      },\n      green: {\n        200: '#52E33C'\n      }\n    },\n    brandGreen: {\n      // 500: '#00BF4D',\n      500: '#02993E',\n      600: '#02993E'\n    }\n  },\n  space: {\n    14: '3.5rem',\n    60: '15rem',\n    66: '17.5rem',\n    70: '18rem',\n    80: '20rem',\n    82: '21rem',\n    85: '23rem',\n    90: '25rem',\n    95: '26rem',\n    108: '27rem',\n    109: '28rem',\n    110: '30rem',\n    115: '32rem',\n    120: '35rem',\n    122: '37rem',\n    125: '45rem',\n    127: '48rem',\n    130: '55rem',\n    135: '60rem',\n    137: '65rem',\n    140: '70rem',\n    145: '76rem'\n  },\n  sizes: {\n    14: '3.5rem',\n    60: '15rem',\n    66: '17.5rem',\n    70: '18rem',\n    80: '20rem',\n    82: '21rem',\n    85: '23rem',\n    90: '25rem',\n    95: '26rem',\n    108: '27rem',\n    109: '28rem',\n    110: '30rem',\n    115: '32rem',\n    117: '33rem',\n    120: '35rem',\n    122: '37rem',\n    124: '40rem',\n    125: '45rem',\n    127: '48rem',\n    130: '55rem',\n    135: '60rem',\n    137: '65rem',\n    140: '70rem',\n    145: '76rem'\n  },\n  shadows: {\n    1000: '0 10px 20px 0 rgba(97, 111, 57, 0.5)',\n    2000: '10px 10px 20px 0 rgba(0, 0, 0, 0.1);'\n  }\n})\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Flex, Text, Spinner } from '@chakra-ui/react'\n\ninterface Props {\n  text?: string\n}\nconst Splash: React.FC<Props> = ({ text }) => (\n  <Flex flexDir=\"column\" h=\"100vh\" align=\"center\" justify=\"center\">\n    <Spinner\n      size=\"lg\"\n      speed=\"0.65s\"\n      thickness=\"5px\"\n      emptyColor=\"gray.200\"\n      color=\"brand.green.200\"\n    />\n    {text && <Text className=\"loading-text loading-text-b\">{text}</Text>}\n  </Flex>\n)\n\nSplash.propTypes = {\n  text: PropTypes.string\n}\n\nexport default Splash\n","import { Flex, Text } from '@chakra-ui/react'\n\nconst NotFound = (): JSX.Element => {\n  return (\n    <Flex w=\"full\" h=\"100vh\">\n      <Text m=\"auto\" fontFamily=\"cursive\" fontSize=\"3xl\">\n        404 | Page Not Found\n      </Text>\n    </Flex>\n  )\n}\n\nexport default NotFound\n","import { lazy } from 'react'\n\nimport NotFound from './404'\n\nconst Login = lazy(() => import('./Login'))\n// const Logout = lazy(() => import('./Logout'))\nconst Register = lazy(() => import('./Register'))\n// const Dashboard = lazy(() => import('./Dashboard'))\n\nexport const Views = {\n  Login,\n  NotFound,\n  // Logout,\n  Register\n  // Dashboard\n}\n","import { useEffect, Suspense } from 'react'\nimport { useRoutes, useNavigate, useLocation } from 'react-router-dom'\nimport { Splash } from 'Components/Shared/Loading'\nimport { Views } from 'Views'\n\nfunction Router() {\n  const { pathname } = useLocation()\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    if (pathname === '/') {\n      navigate('/login')\n    }\n  }, [])\n\n  const element = useRoutes([\n    {\n      path: '/login',\n      element: (\n        <Suspense fallback={<Splash text=\"opening login...\" />}>\n          <Views.Login />\n        </Suspense>\n      )\n    },\n    {\n      path: '/register',\n      element: (\n        <Suspense fallback={<Splash text=\"opening register...\" />}>\n          <Views.Register />\n        </Suspense>\n      )\n    },\n    {\n      path: '/dashboard',\n      element: (\n        <Suspense fallback={<Splash text=\"opening dashboard...\" />}>\n          <Views.Login />\n        </Suspense>\n      )\n    },\n    {\n      path: '/logout',\n      element: <Views.NotFound />\n    },\n    {\n      path: '*',\n      element: <Views.NotFound />\n    }\n  ])\n\n  return element\n}\n\nexport default Router\n","import { FC } from 'react'\nimport { BrowserRouter } from 'react-router-dom'\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport { ChakraProvider } from '@chakra-ui/react'\nimport { AuthContextProvider } from 'Utils/Providers/AuthContextProvider'\n// import { ColorModeSwitcher } from './ColorModeSwitcher'\nimport { theme } from 'Utils/Theme'\nimport Router from 'Routes'\n\nimport 'Assets/Styles/index.css'\nimport 'Assets/Fonts/fonts.css'\n\nconst queryClient = new QueryClient()\n\nexport const App: FC = () => (\n  <ChakraProvider theme={theme}>\n    <QueryClientProvider client={queryClient}>\n      {/* <ColorModeSwitcher justifySelf=\"flex-end\" /> */}\n      <AuthContextProvider>\n        <BrowserRouter>\n          <Router />\n        </BrowserRouter>\n      </AuthContextProvider>\n    </QueryClientProvider>\n  </ChakraProvider>\n)\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL || '',\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react'\nimport * as React from 'react'\nimport ReactDOM from 'react-dom'\nimport { App } from './Container/App'\nimport reportWebVitals from './reportWebVitals'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","import axios from 'axios'\nimport QueryString from 'query-string'\nimport { API_URL } from 'Utils/variables'\nimport { IDelete, IGet, IPatch, IPost, IPut } from 'Interfaces/axios.interface'\n\nclass HttpFacade {\n  private http\n  constructor() {\n    this.http = axios.create({\n      baseURL: API_URL,\n      headers: { 'Content-Type': 'application/json' }\n    })\n\n    this.http.interceptors.request.use(\n      config => {\n        const token = window.sessionStorage.getItem('_fl_ut_')\n        if (token && config.headers) {\n          config.headers.Authorization = 'Bearer ' + token\n        }\n        return config\n      },\n      error => Promise.reject(error)\n    )\n\n    this.http.interceptors.response.use(\n      response => response,\n      error => {\n        if ([401, 403].includes(error?.response?.status)) {\n          // TODO: show login\n        }\n        return Promise.reject(error.response)\n      }\n    )\n  }\n\n  post = async ({ url, body }: IPost) => {\n    const response = await this.http.post(url, body)\n    return response.data\n  }\n\n  patch = async ({ url, body }: IPatch) => {\n    const response = await this.http.patch(url, body)\n    return response.data\n  }\n\n  get = async ({ url, query = {} }: IGet) => {\n    const queryString = '?' + QueryString.stringify(query)\n    const response = await this.http.get(`${url + queryString}`)\n    return response.data\n  }\n\n  delete = async ({ url }: IDelete) => {\n    const response = await this.http.delete(url)\n    return response.data\n  }\n\n  put = async ({ url, body }: IPut) => {\n    const response = await this.http.put(url, body)\n    return response.data\n  }\n}\n\nexport default new HttpFacade()\n","import axios from './axios'\nimport { IResponse } from 'Interfaces/mics.interface'\nimport { IUser, IAuthData } from 'Interfaces/auth.interface'\n\nexport const register = async (\n  payload: Partial<IUser>\n): Promise<IResponse<null>> =>\n  await axios.post({ url: '/register', body: JSON.stringify(payload) })\n\nexport const login = async (\n  payload: Partial<IUser>\n): Promise<IResponse<IAuthData>> =>\n  await axios.post({ url: '/login', body: JSON.stringify(payload) })\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport create from 'zustand'\nimport { login, register } from 'Utils/Api/services'\nimport { IUser } from 'Interfaces/auth.interface'\n\ninterface IAuthStore {\n  isLoading: boolean\n  user?: IUser | null\n  token?: string | null\n  error?: string | null\n  message?: string | null\n  login: (p: IUser) => Promise<void>\n  register: (p: Partial<IUser>) => Promise<void>\n}\n\nexport const authStore = create<IAuthStore>(set => ({\n  user: null,\n  token: JSON.parse(localStorage.getItem('mY-dC_f=T') || 'null'),\n  error: null,\n  message: null,\n  isLoading: false,\n  login: async payload => {\n    try {\n      set(() => ({ isLoading: true, error: null, message: null }))\n      const {\n        message,\n        result: { user, token }\n      } = await login(payload)\n      set(() => ({ isLoading: false, user, token, message }))\n    } catch (err: any) {\n      let error = 'Unexpected network error.'\n      if (err.status === 500) {\n        error = err?.message\n      }\n      if (err.status === 400 && err?.data?.errors) {\n        error = Object.values(err?.data?.errors).join(' <br /> ')\n      }\n      set(() => ({ isLoading: false, error }))\n    }\n  },\n  register: async payload => {\n    try {\n      set(() => ({ isLoading: true, error: null, message: null }))\n      const { message } = await register(payload)\n      set(() => ({ isLoading: false, message }))\n    } catch (err: any) {\n      let error = 'Unexpected network error.'\n      if (err.status === 500) {\n        error = err?.message\n      }\n      if (err.status === 400 && err?.data?.errors) {\n        error = Object.values(err?.data?.errors).join(' <br /> ')\n      }\n      set(() => ({ isLoading: false, error }))\n    }\n  }\n}))\n","import PropTypes from 'prop-types'\nimport { IAuthContext } from 'Interfaces/auth.interface'\nimport { FC, useState, createContext, useContext, useEffect } from 'react'\nimport { useToast } from '@chakra-ui/react'\nimport { authStore } from 'Stores/auth.store'\n\nconst AuthContext = createContext({})\n\nexport const AuthContextProvider: FC = ({ children }) => {\n  const [show, setShow] = useState<boolean>(false)\n  const [isAccepted, setAccepted] = useState<boolean>(false)\n  const { error, message, isLoading, register, login, token } = authStore(\n    state => state\n  )\n\n  const toast = useToast()\n\n  useEffect(() => {\n    if (error || message) {\n      toast({\n        title: error ? 'An error occurred' : 'Registration successful',\n        duration: 20000,\n        description: error || message,\n        position: 'top',\n        status: error ? 'error' : 'success',\n        isClosable: true\n      })\n    }\n\n    return () => authStore.setState({ error: null, message: null })\n  }, [error, message])\n\n  return (\n    <AuthContext.Provider\n      value={{\n        show,\n        login,\n        token,\n        setShow,\n        register,\n        isLoading,\n        isAccepted,\n        setAccepted\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nAuthContextProvider.propTypes = {\n  children: PropTypes.node.isRequired\n}\n\nconst useAuth = (): IAuthContext => useContext(AuthContext) as IAuthContext\n\nexport default useAuth\n","export const API_URL = process.env.REACT_APP_API_URL\nexport const GOOGLE_CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID\nexport const FACEBOOK_CLIENT_ID = process.env.REACT_APP_FACEBOOK_CLIENT_ID\nexport const LINKEDIN_CLIENT_ID = process.env.REACT_APP_LINKEDIN_CLIENT_ID\nexport const LINKEDIN_STATE = process.env.REACT_APP_LINKEDIN_STATE\n"],"sourceRoot":""}